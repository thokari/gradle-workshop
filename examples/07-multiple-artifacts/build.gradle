apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'

repositories { jcenter() }


// These are the custom source sets, each producing its own artifact.
// The convention we will be using here is:
//   - the artifact names are dash-separated
//   - logical names (Gradle objects) are camel case
//   - source directory names are camel case
ext {
	outputArchives = [
		'cats',
		'spoons',
		'oranges',
		'wooly-hats'
	]
}

group = 'de.thokari'
version = '0.1'

apply from: 'gradle/string-utils.groovy'

// Stay groovy and dry ;)
outputArchives.each { outputArchive ->

	String logicalName = outputArchive.camelCase()

	// Create a source set by calling its name, and declaring it as java source.
	sourceSets { "${logicalName}" { java } }

	// By default, the eclipse plugin only adds the 'main' source set to the eclipse
	// classpath, so we need to configure it.
	eclipse {
		classpath.plusConfigurations += configurations."${logicalName}Compile"
	}

	// Add archiving tasks.
	// These could be anything with type AbstractArchiveTask (e.g. War, Zip).
	task("${logicalName}Jar", type: Jar) { from configurations."${logicalName}Compile" }
	task("${logicalName}SourceJar", type: Jar) { from sourceSets."${logicalName}".java }

	// Configure the publishing extension added by the 'maven-publish' plugin.
	// For every combination of publication and repository, a task with name
	// publish<publicationName>PublicationTo<repositoryName>Repository is created.
	// The task 'publish' is a shortcut, depending on each one of them.
	publishing {
		publications {

			// Create a publication by calling its name and type.
			"${logicalName}"(MavenPublication) {

				// Override the artifact id, which defaults to the project name.
				artifactId = outputArchive.dashSeparated()

				// Publish the artifacts created by the archiving tasks.
				artifact tasks."${logicalName}Jar"
				artifact(tasks."${logicalName}SourceJar") { classifier 'source' }
			}
		}
	}
}

publishing {
	repositories {
		maven {
			name 'LocalFile'
			url "file:///$buildDir/repo"
		}
	}
}

//sourceSets {
//	remove main
//}

task createSourceDirs {
	eclipseClasspath.dependsOn it
	doLast {
		sourceSets.all {
			java {
				srcDirs.each {
					if(!it.path.contains("${File.separator}main${File.separator}")) it.mkdirs()
				}
			}
		}
	}
}

// When adding a source set, the configurations <sourceSetName>Compile and
// <sourceSetName>Runtime, are automatically created.
// Any configuration can be used to declare dependencies.
dependencies { woolyHatsCompile  'org.apache.commons:commons-collections4:4.0' }