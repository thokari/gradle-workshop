apply plugin: 'java'
apply plugin: 'eclipse'

task projectSpecificFormatter {
    group 'IDE'
    description 'Adds a formatter definition to eclipse .settings folder'
    eclipseJdt.dependsOn it
    ext {
        formatterXml = file 'eclipse/formatter-java-conventions.xml'
        formatterName = ''
        formatterProperties = [:]
        ignoredProperties = [
            'org.eclipse.jdt.core.compiler.source',
            'org.eclipse.jdt.core.compiler.compliance',
            'org.eclipse.jdt.core.compiler.codegen.targetPlatform'
        ]
        propertiesTemplate = '''
            eclipse.preferences.version=1
            formatter_profile=_%%name%%
            formatter_settings_version=12
            org.eclipse.jdt.ui.exception.name=e
            org.eclipse.jdt.ui.gettersetter.use.is=true
            org.eclipse.jdt.ui.keywordthis=false
            org.eclipse.jdt.ui.overrideannotation=true
        '''.stripIndent()
        settingsFolder = file('.settings')
        eclipseUiPrefs = file("${settingsFolder}/org.eclipse.jdt.ui.prefs")
    }
    doFirst {
        def profiles = new XmlParser().parse formatterXml
        formatterName = profiles.profile[0].attributes().name
        // Skip the properties that refer to Java source/target compatibility, as they
        // are configured by the eclipseJdt task.
        profiles.profile[0].setting.findAll {
            !(it.attributes().id in ignoredProperties)
        }.each {
            formatterProperties.put it.attributes().id, it.attributes().value
        }
        settingsFolder.mkdirs()
        // This file is not generated by the eclipse plugin, so we need to create it.
        eclipseUiPrefs.text = propertiesTemplate.replaceAll '%%name%%', formatterName
    }
}

eclipse {
    jdt { // This refers to the file .settings/org.eclipse.jdt.core.prefs.
        file {
            withProperties { it.putAll projectSpecificFormatter.formatterProperties }
        }
    }
}
